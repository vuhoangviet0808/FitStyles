import torch
import numpy as np
import smplx
import trimesh
from ai_engine.config import MODEL_SMPLX_DIR

# Kh·ªüi t·∫°o m√¥ h√¨nh SMPL-X
smplx_model = smplx.create(MODEL_SMPLX_DIR, model_type='smplx', gender="male", use_pca=False)

def loss_function(betas, model, body_length, body_measurements):
    """
    T√≠nh to√°n loss d·ª±a tr√™n s·ªë ƒëo th·ª±c t·∫ø v√† s·ªë ƒëo t·ª´ m√¥ h√¨nh SMPL-X.
    """
    output = model(betas=betas)
    joints = output.joints[0]  # L·∫•y t·ªça ƒë·ªô kh·ªõp t·ª´ m√¥ h√¨nh

    # D·ª± ƒëo√°n s·ªë ƒëo t·ª´ m√¥ h√¨nh SMPL-X
    predicted_height = joints[0, 1]
    predicted_arm_length = (joints[16, 1] - joints[17, 1]).abs()
    predicted_leg_length = (joints[1, 1] - joints[4, 1]).abs()
    predicted_shoulder_width = (joints[12, 0] - joints[11, 0]).abs()

    predicted_chest_width = (joints[12, 0] - joints[11, 0]).abs()
    predicted_waist_width = (joints[9, 0] - joints[8, 0]).abs()
    predicted_hips_width = (joints[7, 0] - joints[6, 0]).abs()

    # T√≠nh loss
    loss = (
        (predicted_height - body_length["height"])**2 +
        (predicted_arm_length - body_length["arm"])**2 +
        (predicted_leg_length - body_length["leg"])**2 +
        (predicted_shoulder_width - body_length["shoulder"])**2 +
        (predicted_chest_width - body_measurements["chest"])**2 +
        (predicted_waist_width - body_measurements["waist"])**2 +
        (predicted_hips_width - body_measurements["hip"])**2
    )

    return loss

def smpl_joints_to_parameters(model, body_length, body_measurements, num_iterations=200, learning_rate=0.01):
    """
    T·ªëi ∆∞u `betas` b·∫±ng Adam ƒë·ªÉ kh·ªõp v·ªõi s·ªë ƒëo th·ª±c t·∫ø.
    """
    # Kh·ªüi t·∫°o `betas` c√≥ requires_grad=True
    betas = torch.zeros(1, 10, dtype=torch.float32, requires_grad=True)

    # Kh·ªüi t·∫°o optimizer Adam
    optimizer = torch.optim.Adam([betas], lr=learning_rate)

    # T·ªëi ∆∞u h√≥a Adam
    for i in range(num_iterations):
        optimizer.zero_grad()  # X√≥a gradient c≈©
        loss = loss_function(betas, model, body_length, body_measurements)  # T√≠nh loss
        loss.backward()  # T√≠nh gradient
        optimizer.step()  # C·∫≠p nh·∫≠t betas

        if (i + 1) % 20 == 0:  # In loss sau m·ªói 20 v√≤ng l·∫∑p
            print(f"üî• Iter {i+1}/{num_iterations}, Loss: {loss.item()}, Betas: {betas.detach().numpy()}")

    # ƒê·∫£m b·∫£o `betas` c√≥ ƒë√∫ng shape (1, 10)
    betas = betas.detach()  # Lo·∫°i b·ªè requires_grad

    # Pose m·∫∑c ƒë·ªãnh (ng∆∞·ªùi ƒë·ª©ng th·∫≥ng, kh√¥ng c·ª≠ ƒë·ªông)
    pose = torch.zeros(1, 63, dtype=torch.float32)

    return betas, pose

def display_3d_model(vertices, faces):
    """
    Hi·ªÉn th·ªã m√¥ h√¨nh 3D t·ª´ t·ªça ƒë·ªô ƒë·ªânh (`vertices`) v√† m·∫∑t (`faces`).
    """
    mesh = trimesh.Trimesh(vertices=vertices, faces=faces)
    mesh.show()

# V√≠ d·ª• s·ªë ƒëo th·ª±c t·∫ø
body_length = {
    "height": 160,  # Chi·ªÅu cao t·ªïng th·ªÉ (cm)
    "arm": 65,  # Chi·ªÅu d√†i tay (cm)
    "shoulder": 45,  # Chi·ªÅu r·ªông vai (cm)
    "leg": 90  # Chi·ªÅu d√†i ch√¢n (cm)
}

body_measurements = {
    "chest": 75,  # V√≤ng ng·ª±c (cm)
    "waist": 95,  # V√≤ng eo (cm)
    "hip": 100  # V√≤ng m√¥ng (cm)
}

# G·ªçi h√†m t·ªëi ∆∞u b·∫±ng Adam
betas, pose = smpl_joints_to_parameters(smplx_model, body_length, body_measurements)

print("üî• Betas t·ªëi ∆∞u:", betas)

# S·ª≠a l·ªói `RuntimeError`: ƒê·∫£m b·∫£o betas c√≥ ƒë√∫ng s·ªë chi·ªÅu (1, 10)
if betas.dim() == 2 and betas.shape[0] == 1:
    betas = betas.squeeze(0)  # Chuy·ªÉn t·ª´ (1, 10) th√†nh (10,)

# Ki·ªÉm tra n·∫øu m√¥ h√¨nh y√™u c·∫ßu `expression`
expression = torch.zeros(1, 10, dtype=torch.float32)  # Bi·ªÉu c·∫£m khu√¥n m·∫∑t (SMPL-X c·∫ßn ƒëi·ªÅu n√†y)

# Ch·∫°y m√¥ h√¨nh v·ªõi `betas`, `pose`, v√† `expression`
output = smplx_model.forward(betas=betas.unsqueeze(0), body_pose=pose, expression=expression)

# Hi·ªÉn th·ªã m√¥ h√¨nh 3D sau khi t·ªëi ∆∞u
vertices = output.vertices.detach().cpu().numpy().squeeze()
display_3d_model(vertices, smplx_model.faces)
